AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Template Cognito for authentication

# region parameters

Parameters:
  Project:
    Type: String
    Description: Name of the project

# endregion

# region globals

Globals:
  Function:
    Timeout: 10
    Runtime: python3.9
    CodeUri: ../src/
    MemorySize: 256
    Environment:
      Variables:
        AWS_ACCOUNT_ID: !Ref AWS::AccountId
        DYNAMO_REGION: !Ref AWS::Region

# endregion

Resources:

  IoTApplicationUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${Project}-UserPool"
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          TemporaryPasswordValidityDays: 14
      LambdaConfig: { }
      AutoVerifiedAttributes:
        - "email"
      UsernameAttributes:
        - "email"
      UserPoolTags:
        Project: !Ref Project


  UserPoolWebClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref IoTApplicationUserPool
      ClientName: !Sub "${Project}-WebClient"
      RefreshTokenValidity: 365
      ExplicitAuthFlows:
        - "ALLOW_CUSTOM_AUTH"
        - "ALLOW_REFRESH_TOKEN_AUTH"
        - "ALLOW_USER_PASSWORD_AUTH"
      GenerateSecret: true
      #CallbackURLs:
       # - #?
      #LogoutURLs:
        #- #?
      AllowedOAuthFlows:
        - "code"
      AllowedOAuthScopes:
        - "email"
        - "profile"
      AllowedOAuthFlowsUserPoolClient: true
      IdTokenValidity: 60
      AccessTokenValidity: 60
      TokenValidityUnits:
        AccessToken: "minutes"
        IdToken: "minutes"
        RefreshToken: "days"

  # Cognito Identity pool

  IoTApplicationIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub "${Project}-IdentityPool"
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ProviderName: !Sub "cognito-idp.${AWS::Region}.amazonaws.com/${IoTApplicationUserPool}"
      ServerSideTokenCheck: false

  SHIdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IoTApplicationIdentityPool
      Roles:
        authenticated: !GetAtt CognitoAuthenticatedRole.Arn
        unauthenticated: !GetAtt CognitoUnauthenticatedRole.Arn


  CognitoAuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      RoleName: !Sub "${Project}-CognitoAuthenticatedRole"
      AssumeRolePolicyDocument: !Sub "{\"Version\": \"2012-10-17\", \"Statement\": [{ \"Effect\": \"Allow\", \"Principal\": { \"Federated\": \"cognito-identity.amazonaws.com\" }, \"Action\": \"sts:AssumeRoleWithWebIdentity\", \"Condition\": { \"StringEquals\": { \"cognito-identity.amazonaws.com:aud\": \"${InfinityIdentityPool}\" }, \"ForAnyValue:StringLike\": { \"cognito-identity.amazonaws.com:amr\": \"authenticated\" }}}]}"
      MaxSessionDuration: 3600
      Tags:
        - Key: "Project"
          Value: !Ref Project
        - Key: "Name"
          Value: !Sub "${Project}-CognitoAuthenticatedRole"


  CognitoUnauthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      RoleName: !Sub "${Project}-CognitoUnauthenticatedRole"
      AssumeRolePolicyDocument: !Sub "{\"Version\": \"2012-10-17\", \"Statement\": [{ \"Effect\": \"Allow\", \"Principal\": { \"Federated\": \"cognito-identity.amazonaws.com\" }, \"Action\": \"sts:AssumeRoleWithWebIdentity\", \"Condition\": { \"StringEquals\": { \"cognito-identity.amazonaws.com:aud\": \"${InfinityIdentityPool}\" }, \"ForAnyValue:StringLike\": { \"cognito-identity.amazonaws.com:amr\": \"authenticated\" }}}]}"
      MaxSessionDuration: 3600
      Tags:
        - Key: "Project"
          Value: !Ref Project
        - Key: "Name"
          Value: !Sub "${Project}-CognitoUnauthenticatedRole"


  # Policy attached to Cognito authenticated role that allows access APIs
  LambdaInvocationPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "${Project}-LambdaInvocationPolicy"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - "appsync:GraphQL"
            Resource:
              - "*"
      Roles:
        - !Ref CognitoAuthenticatedRole